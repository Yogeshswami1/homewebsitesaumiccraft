{"version":3,"file":"static/js/823.05ae57f1.chunk.js","mappings":"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","sources":["components/Sections/Header.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\r\n// import styled from \"styled-components\";\r\n// import axios from \"axios\";\r\n// import SaumicVideo from \"../../assets/video/Saumic-Craft.webm\"; // Add your background video file here\r\n\r\n// export default function Header() {\r\n//   const [event, setEvent] = useState(null);\r\n//   const [isCardVisible, setIsCardVisible] = useState(false); // State to track card visibility\r\n//   const apiUrl = process.env.REACT_APP_BACKEND_URL; // Your backend URL\r\n\r\n//   useEffect(() => {\r\n//     const fetchEvent = async () => {\r\n//       try {\r\n//         const response = await axios.get(`${apiUrl}/events/`); // Adjust endpoint as necessary\r\n//         const events = response.data;\r\n\r\n//         if (events && events.length > 0) {\r\n//           // Get the closest event to today\r\n//           const today = new Date();\r\n//           const closestEvent = events.reduce((prev, curr) => {\r\n//             const prevDate = new Date(prev.date);\r\n//             const currDate = new Date(curr.date);\r\n//             return Math.abs(currDate - today) < Math.abs(prevDate - today) ? curr : prev;\r\n//           });\r\n\r\n//           setEvent(closestEvent);\r\n//           setIsCardVisible(true); // Set card visibility to true when an event is found\r\n//         }\r\n//       } catch (error) {\r\n//         console.error(\"Failed to fetch event data:\", error);\r\n//       }\r\n//     };\r\n\r\n//     fetchEvent();\r\n//   }, []);\r\n\r\n//   const renderEventDetails = () => {\r\n//     if (!event) return null;\r\n\r\n//     const dayOfWeek = new Date(event.date).toLocaleDateString('en-US', { weekday: 'long' });\r\n//     const monthName = new Date(event.date).toLocaleDateString('en-US', { month: 'long' });\r\n//     const day = new Date(event.date).getDate();\r\n\r\n//     return (\r\n//       <DetailsCard>\r\n//         <CardTitle>Upcoming Events</CardTitle>\r\n//         <h1>{event.title}</h1>\r\n//         <h2>{event.subtitle}</h2>\r\n//         <DateInfo>\r\n//           <Label>Date:</Label>\r\n//           <p>{dayOfWeek}, {`${monthName} ${day}`}</p>\r\n//         </DateInfo>\r\n//         <DateInfo>\r\n//           <Label>Time:</Label>\r\n//           <p>{event.time}</p>\r\n//         </DateInfo>\r\n//         <DateInfo>\r\n//           <Label>Venue:</Label>\r\n//           <p>{event.venue}</p>\r\n//         </DateInfo>\r\n       \r\n//         <ButtonLink href={event.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n//           Register Now\r\n//         </ButtonLink>\r\n//       </DetailsCard>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <Wrapper id=\"home\">\r\n//       <VideoBackground isCardVisible={isCardVisible}>\r\n//         <video autoPlay loop muted playsInline preload=\"auto\">\r\n//           <source src={SaumicVideo} type=\"video/webm\" />\r\n//         </video>\r\n//       </VideoBackground>\r\n\r\n//       {renderEventDetails()}\r\n//     </Wrapper>\r\n//   );\r\n// }\r\n\r\n// // Styled Components\r\n\r\n// const Wrapper = styled.section`\r\n//   position: relative;\r\n//   width: 100%;\r\n//   height: 100vh; /* Full viewport height */\r\n//   overflow: hidden;\r\n// `;\r\n\r\n// const VideoBackground = styled.div`\r\n//   position: absolute;\r\n//   top: 0;\r\n//   left: 0;\r\n//   width: 100%;\r\n//   height: 100%;\r\n//   z-index: -1;\r\n//   video {\r\n//     width: 100%;\r\n//     height: 100%;\r\n//     object-fit: cover;\r\n//     filter: ${(props) => (props.isCardVisible ? 'brightness(50%)' : 'none')}; /* Lower brightness when card is visible */\r\n//     transition: filter 0.5s ease-in-out; /* Smooth transition */\r\n//   }\r\n// `;\r\n\r\n// const DetailsCard = styled.div`\r\n//   position: absolute;\r\n//   top: 20%; /* Adjust the vertical position */\r\n//   right: 3%; /* Adjust the horizontal position to the right */\r\n//   background: rgba(255, 255, 255, 0.6); /* Increased transparency */\r\n//   padding: 10px;\r\n//   border-radius: 10px;\r\n//   box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n//   color: #333; /* Dark text color */\r\n//   max-width: 350px; /* Limit the width of the card */\r\n//   display: flex;\r\n//   flex-direction: column;\r\n//   align-items: center; /* Center horizontally */\r\n//   justify-content: center; /* Center vertically */\r\n//   text-align: center; /* Center text */\r\n//   backdrop-filter: blur(0px); /* Adds a blur effect behind the card */\r\n//   opacity: 0.9; /* Additional control for transparency */\r\n// `;\r\n\r\n// const CardTitle = styled.h1`\r\n//   font-size: 24px;\r\n//   font-weight: bold;\r\n//   text-align: center;\r\n//   background: linear-gradient(90deg, #ff8a00, #da1b60);\r\n//   -webkit-background-clip: text;\r\n//   -webkit-text-fill-color: transparent;\r\n//   margin-bottom: 20px;\r\n// `;\r\n\r\n// const DateInfo = styled.div`\r\n//   font-size: 16px;\r\n//   margin: 10px 0;\r\n// `;\r\n\r\n// const Label = styled.span`\r\n//   font-weight: bold;\r\n//   margin-right: 5px;\r\n// `;\r\n\r\n// const ButtonLink = styled.a`\r\n//   display: inline-block;\r\n//   margin-top: 20px;\r\n//   padding: 12px 20px;\r\n//   background: linear-gradient(90deg, #ff8a00, #da1b60); /* Gradient for the button */\r\n//   color: white;\r\n//   border-radius: 5px;\r\n//   text-decoration: none;\r\n//   text-align: center;\r\n//   transition: background 0.3s ease-in-out;\r\n\r\n//   &:hover {\r\n//     background: linear-gradient(90deg, #da1b60, #ff8a00); /* Reverse gradient on hover */\r\n//   }\r\n// `;\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Header() {\r\n  const [event, setEvent] = useState(null);\r\n  const [isCardVisible, setIsCardVisible] = useState(false); // State to track card visibility\r\n  const apiUrl = process.env.REACT_APP_BACKEND_URL; // Your backend URL\r\n\r\n  useEffect(() => {\r\n    const fetchEvent = async () => {\r\n      try {\r\n        const response = await axios.get(`${apiUrl}/events/`); // Adjust endpoint as necessary\r\n        const events = response.data;\r\n\r\n        if (events && events.length > 0) {\r\n          // Get the closest event to today\r\n          const today = new Date();\r\n          const closestEvent = events.reduce((prev, curr) => {\r\n            const prevDate = new Date(prev.date);\r\n            const currDate = new Date(curr.date);\r\n            return Math.abs(currDate - today) < Math.abs(prevDate - today) ? curr : prev;\r\n          });\r\n\r\n          setEvent(closestEvent);\r\n          setIsCardVisible(true); // Set card visibility to true when an event is found\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch event data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchEvent();\r\n  }, []);\r\n\r\n  const renderEventDetails = () => {\r\n    if (!event) return null;\r\n\r\n    const dayOfWeek = new Date(event.date).toLocaleDateString('en-US', { weekday: 'long' });\r\n    const monthName = new Date(event.date).toLocaleDateString('en-US', { month: 'long' });\r\n    const day = new Date(event.date).getDate();\r\n\r\n    return (\r\n      <DetailsCard>\r\n        <CardTitle>Upcoming Events</CardTitle>\r\n        <h1>{event.title}</h1>\r\n        <h2>{event.subtitle}</h2>\r\n        <DateInfo>\r\n          <Label>Date:</Label>\r\n          <p>{dayOfWeek}, {`${monthName} ${day}`}</p>\r\n        </DateInfo>\r\n        <DateInfo>\r\n          <Label>Time:</Label>\r\n          <p>{event.time}</p>\r\n        </DateInfo>\r\n        <DateInfo>\r\n          <Label>Venue:</Label>\r\n          <p>{event.venue}</p>\r\n        </DateInfo>\r\n       \r\n        <ButtonLink href={event.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Register Now\r\n        </ButtonLink>\r\n      </DetailsCard>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Wrapper id=\"home\">\r\n      <VideoBackground isCardVisible={isCardVisible}>\r\n        <video autoPlay loop muted playsInline preload=\"auto\">\r\n          <source src=\"https://saumicbucket.s3.ap-south-1.amazonaws.com/homepage+folder/video/Saumic-Craft.webm\" type=\"video/webm\" />\r\n        </video>\r\n      </VideoBackground>\r\n\r\n      <Heading style={{paddingTop: '5rem'}}>Welcome to Our Event Platform</Heading>\r\n      {renderEventDetails()}\r\n      <CenterButton>Learn More</CenterButton>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\n// Styled Components\r\n\r\nconst Wrapper = styled.section`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100vh; /* Full viewport height */\r\n  overflow: hidden;\r\n`;\r\n\r\nconst VideoBackground = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  z-index: -1;\r\n  video {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    filter: ${(props) => (props.isCardVisible ? 'brightness(50%)' : 'none')}; /* Lower brightness when card is visible */\r\n    transition: filter 0.5s ease-in-out; /* Smooth transition */\r\n  }\r\n`;\r\n\r\nconst Heading = styled.h1`\r\n  position: absolute;\r\n  top: 5%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  color: white;\r\n  font-size: 36px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  z-index: 2;\r\n`;\r\n\r\nconst CenterButton = styled.button`\r\n  position: absolute;\r\n  bottom: 5%;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  padding: 12px 20px;\r\n  background: linear-gradient(90deg, #ff8a00, #da1b60); /* Gradient for the button */\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 18px;\r\n  cursor: pointer;\r\n  z-index: 2;\r\n  transition: background 0.3s ease-in-out;\r\n\r\n  &:hover {\r\n    background: linear-gradient(90deg, #da1b60, #ff8a00); /* Reverse gradient on hover */\r\n  }\r\n`;\r\n\r\nconst DetailsCard = styled.div`\r\n  position: absolute;\r\n  top: 20%; /* Adjust the vertical position */\r\n  right: 3%; /* Adjust the horizontal position to the right */\r\n  background: rgba(255, 255, 255, 0.6); /* Increased transparency */\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\r\n  color: #333; /* Dark text color */\r\n  max-width: 350px; /* Limit the width of the card */\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center; /* Center horizontally */\r\n  justify-content: center; /* Center vertically */\r\n  text-align: center; /* Center text */\r\n  backdrop-filter: blur(0px); /* Adds a blur effect behind the card */\r\n  opacity: 0.9; /* Additional control for transparency */\r\n`;\r\n\r\nconst CardTitle = styled.h1`\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  background: linear-gradient(90deg, #ff8a00, #da1b60);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst DateInfo = styled.div`\r\n  font-size: 16px;\r\n  margin: 10px 0;\r\n`;\r\n\r\nconst Label = styled.span`\r\n  font-weight: bold;\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst ButtonLink = styled.a`\r\n  display: inline-block;\r\n  margin-top: 20px;\r\n  padding: 12px 20px;\r\n  background: linear-gradient(90deg, #ff8a00, #da1b60); /* Gradient for the button */\r\n  color: white;\r\n  border-radius: 5px;\r\n  text-decoration: none;\r\n  text-align: center;\r\n  transition: background 0.3s ease-in-out;\r\n\r\n  &:hover {\r\n    background: linear-gradient(90deg, #da1b60, #ff8a00); /* Reverse gradient on hover */\r\n  }\r\n`;\r\n"],"names":["Header","event","setEvent","useState","isCardVisible","setIsCardVisible","useEffect","async","events","axios","get","data","length","today","Date","closestEvent","reduce","prev","curr","prevDate","date","currDate","Math","abs","error","console","fetchEvent","_jsxs","Wrapper","id","children","_jsx","VideoBackground","autoPlay","loop","muted","playsInline","preload","src","type","Heading","style","paddingTop","renderEventDetails","dayOfWeek","toLocaleDateString","weekday","monthName","month","day","getDate","DetailsCard","CardTitle","title","subtitle","DateInfo","Label","time","venue","ButtonLink","href","link","target","rel","CenterButton","styled","section","div","props","h1","button","span","a"],"sourceRoot":""}